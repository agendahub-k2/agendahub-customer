name: Deploy to AWS

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Print environment variables
        run: |
          echo "AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
          echo "ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}"

      - name: Validate AWS Credentials
        run: |
          aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "Obtaining ECR login"
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
          echo "Building Docker image"
          docker build -t agendahub_customer .
          
          echo "Tagging Docker image"
          docker tag agendahub_customer:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          
          echo "Pushing Docker image"
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy to ECS
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            PROFILE="prod"
            RDS_ENDPOINT="${{ secrets.RDS_ENDPOINT_PROD }}"
            DB_USERNAME="${{ secrets.DB_USERNAME_PROD }}"
            DB_PASSWORD="${{ secrets.DB_PASSWORD_PROD }}"
          else
            PROFILE="qa"
            RDS_ENDPOINT="${{ secrets.RDS_ENDPOINT_QA }}"
            DB_USERNAME="${{ secrets.DB_USERNAME_QA }}"
            DB_PASSWORD="${{ secrets.DB_PASSWORD_QA }}"
          fi

          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment --region ${{ secrets.AWS_REGION }} --overrides '{
            "containerOverrides": [{
              "name": "agendahub_customer",
              "environment": [
                {"name": "SPRING_DATASOURCE_URL", "value": "jdbc:mysql://'"$RDS_ENDPOINT"':3306/customer"},
                {"name": "SPRING_DATASOURCE_USERNAME", "value": "'"$DB_USERNAME"'"},
                {"name": "SPRING_DATASOURCE_PASSWORD", "value": "'"$DB_PASSWORD"'"},
                {"name": "SPRING_PROFILES_ACTIVE", "value": "'"$PROFILE"'"}
              ]
            }]
          }'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
